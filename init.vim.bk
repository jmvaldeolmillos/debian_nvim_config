" SETS ------------------------------------------------------------

set number
set relativenumber
set autoindent
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4
set mouse=a
set numberwidth=1
set ruler
set title
set cursorline
set encoding=utf-8
set list " show tabs, eol and spaces
set listchars=tab:▸\ ,eol:¬,trail:· " chars to use to show the tabs, eol and spaces
set nocompatible " no vi-compatible
set wildmenu
set scrolloff=5 " when scrolling, keep cursor 5 lines away from screen border
set completeopt-=preview " For No Previews
set updatetime=300 " You will have a bad experience with diagnostic messages with the default 4000.
set shortmess+=c " Don't give |ins-completion-menu| messages.
set signcolumn=yes " Always show signcolumns
set cmdheight=2 " Give more space for displaying messages.


" allow plugins by file type (required for plugins!)
filetype plugin on
filetype indent on

" swap, backup and undo files
set directory=~/.vim/dirs/tmp     " folder for swap files
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " folder for backup files
set undofile                      " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos

"" Searchig
set hlsearch
set incsearch " incremental search
set ignorecase " search is case insensitive but you can add \C to make it sensitive
set smartcase " will automatically switch to a case-sensitive search if you use any capital letters

" other sets
set ls=2 " always show status bar
syntax on " syntax highlight on
filetype plugin indent on       " ... and enable filetype detection
set autoread                    " Automatically read changed files
set autoindent                  " Enabile Autoindent
set autowrite                   " Automatically save before :next, :make etc.

" how to split windows
set splitbelow
set splitright

" ???
set complete=.,w,b,u,t
set completeopt=longest,menuone " Use the popup menu also when there is only one match.
set completeopt-=preview   " Hide the documentation preview window
set omnifunc=syntaxcomplete#Complete

" Para nVim
if !has('nvim')
    set ttymouse=xterm2
endif
  
" Vim-plug initialization

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')

if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" if you exit vim and later start, vim remembers information like, command line history, search history, marks, etc ...
if !has('nvim')
    set viminfo+=n~/.vim/dirs/viminfo "para trabajar con vim
else
    set viminfo+=n~/.nvim/dirs/viminfo 
endif

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif

if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif

if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" ------------------------------------------------------------

call plug#begin("~/.vim/plugged")

" Override configs by directory.
" Create a .vim.custom file in the directory you want to customize.
Plug 'arielrossanigo/dir-configs-override.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " File browser
Plug 'wincent/terminus' " Change cursor in Insert and Replace
Plug 'vim-airline/vim-airline' " Airline
Plug 'vim-airline/vim-airline-themes' " Airline
Plug 'joshdick/onedark.vim' " Color scheme One Dark
Plug 'scrooloose/nerdcommenter' " Code commenter
Plug 'easymotion/vim-easymotion' " Better motion
Plug 'majutsushi/tagbar' " Class/module browser
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'} " Code and files fuzzy finder
Plug 'junegunn/fzf.vim'" Code and files fuzzy finder
Plug 'tpope/vim-fugitive' " Git integration
Plug 'tpope/vim-repeat.git' " Git integration
Plug 'tpope/vim-surround' " Surround
Plug 'sheerun/vim-polyglot'
Plug 'vim-scripts/AutoComplPop'" Autocompletion
Plug 'scrooloose/syntastic' " Syntactic analysis
Plug 'janko-m/vim-test', { 'for': ['python'] } " Run tests
Plug 'tpope/vim-dispatch' " Run tests asynchronous 
Plug 'tyewang/vimux-jest-test' " Run tests
Plug 'xolox/vim-notes' " Note
Plug 'xolox/vim-misc' " needed for vim-notes
Plug 'SirVer/ultisnips' " Code snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Coc need nodejs
Plug 'jiangmiao/auto-pairs' " close pairs
Plug 'junegunn/vim-easy-align' " Others
Plug 'junegunn/rainbow_parentheses.vim' " parentesis con colores
Plug 'terryma/vim-multiple-cursors' " CTRL + N for multiple cursors
Plug 'yanoasis/vim-devicons' " Developer Icons
Plug 'tc50cal/vim-terminal' " Vim Terminal
Plug 'mhinz/vim-signify.git' " Ide
Plug 'yggdroot/indentline' " Ide
Plug 'benmills/vimux' "" tmux
Plug 'hchristoomey/vim-tmux-navigator' "" tmux

call plug#end()

" ------------------------------------------------------------

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

au VimResized *:wincmd = " resize splits when windows are reduced

augroup cline
  " delete any old autocommand
  au! 
  " remove cursor line on windows leave and when on insert mode
  au WinLeave,InsertEnter * set nocursorline
  " show cursor line on window enter or when exit from insert mode
  au WinEnter,InsertLeave * set cursorline
augroup END

" ------------------------------------------------------------

" ============================== 
" MAPEO del Teclado
" ============================== 

" GENERAL ----------------------------------------------------

"" Grabar como sudo
cmap w!! w !sudo tee "%"

"" :map and :noremap are recursive and non-recursive
let mapleader="," 

" quit file
nnoremap <leader>q <esc>:q<cr>

" go to normal mode. amazing!!
inoremap kj <esc>l

" move between windows
noremap <TAB><TAB> <C-w><C-w>

" do nothing when F1 is pressed
noremap <F1> <nop>
inoremap <F1> <nop>

" key mapping for save file
nnoremap <F2> <esc>:w<CR>
inoremap <F2> <esc>:w<CR>
vnoremap <F2> <esc>:w<CR>
nnoremap <leader>s <esc>:w<CR>
inoremap<leader>s <esc>:w<CR>
vnoremap <leader>s <esc>:w<CR>

" tab navigation mappings
nnoremap tn :tabn<CR>
nnoremap tp :tabp<CR>
nnoremap tm :tabm<CR>
nnoremap tt :$tabnew<CR>

" move text lines and blocks
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

"" faster scrolling
nnoremap <C-j> 10<C-e>
nnoremap <C-k> 10<C-y>
nmap <Leader>s <Plug>(easymotion-s2)

"" buffers
map <Leader>ob :Buffers<cr>

" reselect text after indentation
vnoremap < <gv
vnoremap > >gv
nnoremap > <c-w>>
nnoremap < <c-w><

" override next and previous search to show in the middle of the screen (zz)
" and also open just enough folds (zv) to make the line in which the cursor 
" is located not folded.
nnoremap n nzzzv
nnoremap N Nzzzv

" clear search results
nnoremap <silent><space> :nohl<CR>

" select current line without identation
nnoremap vv ^vg_

" duplicate line
nnoremap dl :t.<CR>

" remap up and down keys to navigate on warp lines
noremap j gj
noremap k gk

" repeat t/T/f/F search easily
nnoremap ñ ;

" clear empty spaces at the end of lines on save of python files
autocmd BufWritePre *.py :%s/\s\+$//e

"" ejecutar archivo pero no se si funciona con python
nnoremap <Leader>x :!python3 %<cr>

" ============================
" Plugins configuration
" ============================

" ONE DARK ------------------------------
set termguicolors    " Activa true colors en la terminal
colorscheme onedark  " Activa tema onedark


" GIT -----------------------------------
map <Leader>G :G<cr>
map <Leader>gp :Gpush<cr>
map <Leader>gl :Gpull<cr>


" NERDTree ------------------------------

map <F3> :NERDTreeToggle<CR> " toggle nerdtree display
nmap <F4> :NERDTreeFind<CR> " open nerdtree with the current file selected
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '__pycache__'] " dont show this files
let NERDTreeHighlightCursorline = 1 " show cursor line
nnoremap <C-f> :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-l> :call CocActionAsync('jumpDefinition')<CR>
map <Leader>p :Files<CR>
map <Leader>ag :Ag<CR>
let g:NERDTreeDirArrowExpandable="+"
let g:NERDTreeDirArrowCollapsible="~"

" Autorefresh on tree focus
function! NERDTreeRefresh()
    if &filetype == "nerdtree"
        silent exe substitute(mapcheck("R"), "<CR>", "", "")
    endif
endfunction
autocmd BufEnter * call NERDTreeRefresh()
nmap <F8> :TagbarToggle<CR>


" Ariline -------------------------------

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'


" EasyAlign -------------------------------
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


" IndentLine -------------------------------
let g:indentLine_char = '▏'
let g:indentLine_color_gui = '#363949'


" Fuzzy finder -------------------------
nnoremap <leader>e :GFiles<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>m :History<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>W :Windows<CR>
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--preview', '--info=inline']}, <bang>0)


" Syntastic ----------------------------

let g:syntastic_python_checkers = ['flake8', 'mypy']
let g:syntastic_python_flake8_post_args='--ignore=E501,D100,D101,D102,D103'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0


" Tagbar ------------------------------
let g:tagbar_compact = 1
let g:tagbar_sort = 1
let g:tagbar_autoclose = 1
let g:tagbar_foldlevel = 0
let g:tagbar_width = 60
" open Tagbar
nnoremap <leader>t :TagbarToggle<CR>


" Jedi-vim ------------------------------

let g:jedi#use_tabs_not_buffers = 1
let g:jedi#use_splits_not_buffers = "right"
let g:jedi#environment_path = "/usr/bin/python3"


" Rename -----------------------------
let g:jedi#rename_command = '<leader>R'
" Go to definition
let g:jedi#goto_command = '<leader>d'
" Find ocurrences
let g:jedi#usages_command = '<leader>o'
" Find assignments
let g:jedi#goto_assignments_command = '<leader>a'


" Redimension de tmux -------------------
noremap <Leader>> 10<C-w>>
nnoremap <Leader>< 10<C-w><
"" tmux navigator
nnoremap <silent> <Leader><C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <Leader><C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <Leader><C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <Leader><C-l> :TmuxNavigateRight<cr>


" Vim tests -----------------------------

" run tests in a vim8 terminal
let g:test#strategy = "vimterminal"

nmap <silent> <leader>rt :TestNearest<CR>
nmap <silent> <leader>rT :TestFile<CR>
nmap <silent> <leader>ra :TestSuite<CR>
nmap <silent> <leader>rl :TestLast<CR>
nmap <silent> <leader>rg :TestVisit<CR>


" Vim notes -----------------------------

let g:notes_directories = ['~/Documents/Notes']
let g:notes_suffix = '.txt'


" Ultinips ------------------------------

let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical" " If you want :UltiSnipsEdit to split your window.


" ejecutar una terminal ----------------------------
set splitright
function! OpenTerminal()
  execute "normal \<C-.l>"
  execute "normal \<C-.l>"
  execute "normal \<C-.l>"
  execute "normal \<C-.l>"
  
  let bufNum = bufnr("%")
  let butType = getbufvar(bufNum, "&buftype", "not found")
  
  if buftype == "terminal"
    execute "q"
  else
    execute "vsp term: //zsh"
    
    execute "set nonu"
    execute "set nornu"
    
    silent au BuffLeave <buffer> stopinsert!
    silent au BufWinEnter,WinEnter <buffer> startinsert!
    
    execute "tnoremap <buffer> <C-h> <C-\\><C-n><C-w><C-h>"
    
    execute "tnoremap <buffer> <C-t> <C-\\><C-n>:q<CR>"
    execute "tnoremap <buffer> <C-h> <C-\\><C-\\> <C-\\><C-n>"
    
    startinsert!
  endif
endfunction
nnoremap <C-t> :call OpenTerminal()<CR>


" Configuration for coc.nvim ----------------------------

" Help Vim recognize *.sbt and *.sc as Scala files
au BufRead,BufNewFile *.sbt,*.sc set filetype=scala

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Used in the tab autocompletion for coc
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Used to expand decorations in worksheets
nmap <Leader>ws <Plug>(coc-metals-expand-decoration)

" Use K to either doHover or show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType scala setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of current line
xmap <leader>a  <Plug>(coc-codeaction-line)
nmap <leader>a  <Plug>(coc-codeaction-line)

" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Trigger for code actions
" Make sure `"codeLens.enable": true` is set in your coc config
nnoremap <leader>cl :<C-u>call CocActionAsync('codeLensAction')<CR>

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr> " Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr> " Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr> " Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr> " Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr> " Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR> " Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR> " Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Notify coc.nvim that <enter> has been pressed.
" Currently used for the formatOnType feature.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> <space>t :<C-u>CocCommand metals.tvp<CR> " Toggle panel with Tree Views
nnoremap <silent> <space>tp :<C-u>CocCommand metals.tvp metalsPackages<CR> " Toggle Tree View 'metalsPackages'
nnoremap <silent> <space>tc :<C-u>CocCommand metals.tvp metalsCompile<CR> " Toggle Tree View 'metalsCompile'
nnoremap <silent> <space>tb :<C-u>CocCommand metals.tvp metalsBuild<CR> " Toggle Tree View 'metalsBuild'
nnoremap <silent> <space>tf :<C-u>CocCommand metals.revealInTreeView metalsPackages<CR> " Reveal current current class (trait or object) in Tree View 'metalsPackages'

" ------------------------------------------------------------


" --- Just Some Notes ---
" :PlugClean :PlugInstall :UpdateRemotePlugins
"
" :CocInstall coc-python
" :CocInstall coc-snippets
" :CocCommand snippets.edit... FOR EACH FILE TYPE


""" Custom Functions

" Trim Whitespaces
function! TrimWhitespace()
    let l:save = winsaveview()
    %s/\\\@<!\s\+$//e
    call winrestview(l:save)
endfunction

